datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
//Enumeradores de tipos basicos.
enum TipoMovimiento {
  ENTRADA
  SALIDA
}

enum TipoDocumento {
  FACTURA
  REMITO
  PRESUPUESTO
  CONTEO
}




//Categorias, va a tener una categoria que sea por ejemplo "consumibles/impuestos/alquiler etc.", donde voy a agrupar los impuestos. luz, gas, alquiler etc..
model Categorias {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  nombre   String      @unique
  products Productos[]
}



model Productos {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  codigoBarra  String @unique //todo producto que no tenga codigo de barra, comenzara con 2333[xxxxxx]
  precioActual Float  @default(0)
  stock        Int    @default(0)
  nombre       String

  descripcion String?
  idCategoria String?
  size        Float?
  unidad      String?
  imagen      String? @db.Text

  categoria        Categorias?        @relation(fields: [idCategoria], references: [id])
  precios          Precios[]
  proveedores      Contactos[]
  detalleDocumento DetalleDocumento[]
}

model Precios {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  precio     Float
  idProducto String
  producto   Productos @relation(fields: [idProducto], references: [id])
}





//Documentos, facturas, remitos, pedidos de compra, etc..
model Documentos {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())

  idContacto      String
  idDestinatario  String
  numeroDocumento String
  fecha           DateTime
  tieneImpuestos  Boolean  @default(false)

  tipoDocumento   TipoDocumento
  tipoMovimiento  TipoMovimiento
  detalle         DetalleDocumento[]
  emisor          Contactos        @relation(name: "EmisorDocumento", fields: [idContacto], references: [id])
  receptor        Contactos        @relation(name: "ReceptorDocumento", fields: [idDestinatario], references: [id])
  total           Float            @default(0)

  @@unique([idContacto, numeroDocumento])
}

model DetalleDocumento {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  docRelacionado String
  idProducto     String
  cantidad       Int
  precioUnitario Float

  documento Documentos @relation(fields: [docRelacionado], references: [id])
  producto  Productos  @relation(fields: [idProducto], references: [id])
}


//Libreta de contactos, direcciones, provincias, localidades, calles.
model Contactos {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())

  cuit            String    @unique
  nombre          String    @unique
  telefono        String    @default("0800-completar-telefono")

  persona         String?
  iva             String?
  interno         Boolean   @default(false)
  esProveedor     Boolean   @default(false)
  esMarca         Boolean   @default(false)

  emails              Emails[]
  direcciones         Direcciones[]
  productos           Productos[]
  documentosEmitidos  Documentos[]  @relation("EmisorDocumento")
  documentosRecibidos Documentos[]  @relation("ReceptorDocumento")
}

model Emails {
  id          String      @id @default(uuid())
  email       String      @unique
  idContacto  String
  contacto    Contactos @relation(fields: [idContacto], references: [id])
}



model Direcciones {
  id          String      @id @default(uuid())
  idContacto  String
  contacto    Contactos @relation(fields: [idContacto], references: [id])

  idProvincia String?
  idLocalidad String?
  idCalle     String?

  provincia Provincias?  @relation(fields: [idProvincia], references: [id])
  localidad Localidades? @relation(fields: [idLocalidad], references: [id])
  calle     Calles?      @relation(fields: [idCalle], references: [id])

  numeroCalle   Int?
  piso          String?
  depto         String?
  detalles      String?
}

model Provincias {
  id             String        @id
  nombre         String
  nombreCompleto String
  categoria      String
  fuente         String
  isoId          String
  isoNombre      String
  centroideLat   Float
  centroideLon   Float
  localidades    Localidades[]
  calles         Calles[]
  Direcciones    Direcciones[]
}

model Localidades {
  id                    String  @id
  nombre                String
  fuente                String
  idProvincia           String
  idDepartamento        String?
  idMunicipio           String?
  idLocalidadCensal     String
  nombreLocalidadCensal String
  categoria             String
  centroideLon          Float
  centroideLat          Float

  provincia   Provincias    @relation(fields: [idProvincia], references: [id])
  Direcciones Direcciones[]
}

model Calles {
  id                    String @id
  nombre                String
  categoria             String
  alturas               String
  idProvincia           String
  idLocalidadCensal     String

  provincia   Provincias    @relation(fields: [idProvincia], references: [id])
  Direcciones Direcciones[]
}
