generator client {
  provider = "prisma-client-js"
   seed = "prisma/seed.mjs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categorias {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  nombre    String      @unique
  products  Productos[] @relation("CategoriasToProductos")
}

model Productos {
  id               String              @id @default(uuid())
  createdAt        DateTime            @default(now())
  codigoBarra      String              @unique
  nombre           String
  descripcion      String?
  imagen           String?
  tipoVenta        TipoVenta           @default(UNIDAD)
  size             Float?
  unidad           String?
  detalleDocumento DetalleDocumento[]
  precios          Precios[]
  proveedores      ProductoProveedor[]
  categorias       Categorias[]        @relation("CategoriasToProductos")
  presentaciones   Presentaciones[]
}

model Presentaciones {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  nombre          String
  cantidadUnidad  Float
  unidadMedida    String
  productoId      String
  producto        Productos      @relation(fields: [productoId], references: [id])
}

model ProductoProveedor {
  createdAt   DateTime  @default(now())
  productoId  String
  proveedorId String
  codigo      String
  producto    Productos @relation(fields: [productoId], references: [id])
  proveedor   Contactos @relation(fields: [proveedorId], references: [id])
  @@id([proveedorId, productoId])
  @@unique([proveedorId, productoId])
}

model Precios {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  precio     Float
  idProducto String
  producto   Productos @relation(fields: [idProducto], references: [id])
}

model Documentos {
  id              String             @id @default(uuid())
  createdAt       DateTime           @default(now())
  idContacto      String
  idDestinatario  String
  numeroDocumento String
  fecha           DateTime
  tieneImpuestos  Boolean            @default(false)
  tipoDocumento   TipoDocumento
  tipoMovimiento  TipoMovimiento
  total           Float              @default(0)
  detalle         DetalleDocumento[]
  emisor          Contactos          @relation("EmisorDocumento", fields: [idContacto], references: [id])
  receptor        Contactos          @relation("ReceptorDocumento", fields: [idDestinatario], references: [id])

  @@unique([idContacto, numeroDocumento])
}

model DetalleDocumento {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  docRelacionado String
  idProducto     String
  cantidad       Int
  precioUnitario Float
  documento      Documentos @relation(fields: [docRelacionado], references: [id])
  producto       Productos  @relation(fields: [idProducto], references: [id])
}

model Contactos {
  id                  String              @id @default(uuid())
  createdAt           DateTime            @default(now())
  cuit                String              @unique
  nombre              String              @unique
  telefono            String              @default("0800-completar-telefono")
  persona             String?
  iva                 String?
  esInterno           Boolean             @default(false)
  esProveedor         Boolean             @default(false)
  esMarca             Boolean             @default(false)
  direcciones         Direcciones[]
  documentosEmitidos  Documentos[]        @relation("EmisorDocumento")
  documentosRecibidos Documentos[]        @relation("ReceptorDocumento")
  emails              Emails[]
  productos           ProductoProveedor[]
  cuentaBancaria      CuentaBancaria[]
}

model Usuarios {
  id        String   @id @default(uuid())
  nombre    String   @unique
  password  String
  nivel     Int      @default(1)
  createdAt DateTime @default(now())
  email     String?  @unique
}

model Emails {
  id         String    @id @default(uuid())
  email      String    @unique
  idContacto String
  contacto   Contactos @relation(fields: [idContacto], references: [id])
}

model Direcciones {
  id                String       @id @default(uuid())
  idContacto        String
  idProvincia       String?
  idLocalidad       String?
  depto             String?
  detalles          String?
  idCalle           String?
  idLocalidadCensal String?
  numeroCalle       Int?
  piso              String?
  calle             Calles?      @relation(fields: [idCalle], references: [id])
  contacto          Contactos    @relation(fields: [idContacto], references: [id])
  localidad         Localidades? @relation(fields: [idLocalidad], references: [id])
  provincia         Provincias?  @relation(fields: [idProvincia], references: [id])
}

model Provincias {
  id             String        @id
  nombre         String
  nombreCompleto String
  isoId          String
  calles         Calles[]
  Direcciones    Direcciones[]
  localidades    Localidades[]
}

model Localidades {
  id                    String        @id
  nombre                String
  idProvincia           String
  nombreLocalidadCensal String
  idDepartamento        String?
  idLocalidadCensal     String
  idMunicipio           String?
  Direcciones           Direcciones[]
  provincia             Provincias    @relation(fields: [idProvincia], references: [id])
}

model Calles {
  id                String        @id
  nombre            String
  categoria         String
  idProvincia       String
  alturas           String
  idLocalidadCensal String
  provincia         Provincias    @relation(fields: [idProvincia], references: [id])
  Direcciones       Direcciones[]
}

model CuentaBancaria {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  idContacto  String
  banco       String
  cbu         String
  alias       String
  contacto    Contactos @relation(fields: [idContacto], references: [id])
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
}

enum TipoVenta {
  GRANEL
  UNIDAD
  BULTO
}

enum TipoDocumento {
  FACTURA
  REMITO
  PRESUPUESTO
  CONTEO
}

enum FormaPago {
  EFECTIVO
  TARJETA_CREDITO
  TARJETA_DEBITO
  TRANSFERENCIA
  CHEQUE
  CUENTA_CORRIENTE
}
